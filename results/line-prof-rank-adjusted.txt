kernprof -lv scripts/model_latency_benchmark.py --seq_len 256 --batch_size 8 --mode train --model mps --horizon 4 --rank 4
Total time: 4.85394 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/mps.py
Function: _get_pos_params at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                               @line_profiler.profile
    41                                               def _get_pos_params(self, last_hidden_state: torch.Tensor):
    42       220        166.0      0.8      0.0          batch_size, seq_len, _ = last_hidden_state.shape
    43                                                   # core = self.positivity_func(self.param_func_core(last_hidden_state)).reshape(
    44                                                   #     batch_size, seq_len, self.horizon, self.rank, self.vocab_size, self.rank
    45                                                   # )  # (B, T, HRVR)
    46       220    1218327.0   5537.9     25.1          core = self.param_func_core(last_hidden_state)
    47       220    3622913.0  16467.8     74.6          core = self.positivity_func(core)
    48       440       2231.0      5.1      0.0          core = core.reshape(
    49       220        281.0      1.3      0.0              batch_size, seq_len, self.horizon, self.rank, self.vocab_size, self.rank
    50                                                   )
    51       440        721.0      1.6      0.0          alpha = (
    52       660       6157.0      9.3      0.1              self.positivity_func(self.alpha)
    53       220         60.0      0.3      0.0              .reshape(1, 1, self.rank)
    54       220         33.0      0.1      0.0              .repeat(batch_size, seq_len, 1)
    55       220        228.0      1.0      0.0          ).to(last_hidden_state.device)
    56       440        133.0      0.3      0.0          beta = (
    57       660       2387.0      3.6      0.0              self.positivity_func(self.beta)
    58       220         49.0      0.2      0.0              .reshape(1, 1, self.rank)
    59       220         30.0      0.1      0.0              .repeat(batch_size, seq_len, 1)
    60       220         51.0      0.2      0.0          ).to(last_hidden_state.device)
    61       220         81.0      0.4      0.0          return (
    62       220         37.0      0.2      0.0              alpha,  # (B, T, R)
    63       220         27.0      0.1      0.0              core,  # (B, T, H, R, V, R)
    64       220         28.0      0.1      0.0              beta,  # (B, T, R)
    65                                                   )

Total time: 2.9691 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/mps.py
Function: evaluate_at_points at line 99

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    99                                               @line_profiler.profile
   100                                               def evaluate_at_points(
   101                                                   self,
   102                                                   last_hidden_state: torch.Tensor,
   103                                                   points: torch.Tensor,
   104                                                   **kwargs,
   105                                               ) -> Tuple[torch.Tensor, List[torch.Tensor]]:
   106                                                   """Evaluate the distribution at the given points.
   107                                           
   108                                                   Args:
   109                                                       last_hidden_state (torch.Tensor): Hidden states of the transformer of shape (B, T, D)
   110                                                       points (torch.Tensor): Points to evaluate the distribution. Shape (B, T, H)
   111                                                       horizon (int, optional): Number of steps to consider. Defaults to model horizon.
   112                                           
   113                                                   Returns:
   114                                                       Tuple[torch.Tensor, List[torch.Tensor]]: Evaluation of the distribution at the points of Shape (B*H) and scale_tensors (empty list)
   115                                                   """
   116       110         83.0      0.8      0.0          batch_size, seq_len, _ = last_hidden_state.shape
   117       110        194.0      1.8      0.0          horizon = self._get_horizon(points.size(-1))
   118       220    2418975.0  10995.3     81.5          alpha, core, beta = self._get_pos_params(
   119       110          9.0      0.1      0.0              last_hidden_state
   120                                                   )  # (B, T, R), (B, T, H, R, V, R), (B, T, R)
   121       220     547436.0   2488.3     18.4          p_tilde, scale_factors = select_from_mps_tensor(
   122       110        159.0      1.4      0.0              alpha=alpha.reshape(batch_size * seq_len, self.rank),
   123       110         99.0      0.9      0.0              beta=beta.reshape(batch_size * seq_len, self.rank),
   124       330        970.0      2.9      0.0              core=core.reshape(
   125       110         18.0      0.2      0.0                  batch_size * seq_len,
   126       110         17.0      0.2      0.0                  self.horizon,
   127       110         15.0      0.1      0.0                  self.rank,
   128       110         13.0      0.1      0.0                  self.vocab_size,
   129       110          7.0      0.1      0.0                  self.rank,
   130       110         57.0      0.5      0.0              )[:, :horizon],
   131       110        144.0      1.3      0.0              indices=points.reshape(batch_size * seq_len, -1),
   132                                                   )  # (batch_size, n_vocab)
   133       220        884.0      4.0      0.0          return p_tilde.reshape(batch_size, seq_len), [
   134       110         21.0      0.2      0.0              s.reshape(batch_size, seq_len) for s in scale_factors
   135                                                   ]

Total time: 2.59566 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/mps.py
Function: get_norm_consts at line 137

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   137                                               @line_profiler.profile
   138                                               def get_norm_consts(
   139                                                   self, last_hidden_state: torch.Tensor, horizon: int, **kwargs
   140                                               ) -> Tuple[torch.Tensor, List[torch.Tensor]]:
   141                                                   """Get the normalization constants for the BT distributions.
   142                                           
   143                                                   Args:
   144                                                       last_hidden_state (torch.Tensor): Hidden states of the transformer of shape (B, T, D)
   145                                           
   146                                                   Returns:
   147                                                       Tuple[torch.Tensor, List[torch.Tensor]]: Norm constants and scale tensors
   148                                                   """
   149       110        208.0      1.9      0.0          horizon = self._get_horizon(horizon)
   150       220    2438230.0  11082.9     93.9          alpha, core, beta = self._get_pos_params(
   151       110         14.0      0.1      0.0              last_hidden_state
   152                                                   )  # (B, T, R), (B, T, H, R, V, R), (B, T, R)
   153       110        174.0      1.6      0.0          batch_size, seq_len, _ = last_hidden_state.shape
   154       220     153898.0    699.5      5.9          z, scale_factors = sum_mps_tensor(
   155       110        171.0      1.6      0.0              alpha=alpha.reshape(batch_size * seq_len, self.rank),
   156       110         93.0      0.8      0.0              beta=beta.reshape(batch_size * seq_len, self.rank),
   157       330       1022.0      3.1      0.0              core=core.reshape(
   158       110         19.0      0.2      0.0                  batch_size * seq_len,
   159       110         10.0      0.1      0.0                  self.horizon,
   160       110         24.0      0.2      0.0                  self.rank,
   161       110         15.0      0.1      0.0                  self.vocab_size,
   162       110         11.0      0.1      0.0                  self.rank,
   163       110         47.0      0.4      0.0              )[:, :horizon],
   164                                                   )
   165       220       1706.0      7.8      0.1          return z.reshape(batch_size, seq_len), [
   166       110         16.0      0.1      0.0              s.reshape(batch_size, seq_len) for s in scale_factors
   167                                                   ]



kernprof -lv scripts/model_latency_benchmark.py --seq_len 256 --batch_size 8 --mode train --model cp --horizon 4 --rank 16
Total time: 4.78477 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/cp.py
Function: _get_pos_params at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                               @line_profiler.profile
    47                                               def _get_pos_params(
    48                                                   self, last_hidden_state: torch.Tensor, horizon: Optional[int] = None
    49                                               ):
    50       220         95.0      0.4      0.0          batch_size, seq_len, _ = last_hidden_state.size()
    51                                                   # params = self.positivity_func(self.param_func(last_hidden_state))
    52       220    1187623.0   5398.3     24.8          params = self.param_func(last_hidden_state)
    53       220    3592310.0  16328.7     75.1          params = self.positivity_func(params)
    54       440       1768.0      4.0      0.0          params_reshaped = params.reshape(
    55       220        259.0      1.2      0.0              batch_size, seq_len, self.rank, self.horizon, self.vocab_size
    56                                                   )
    57       220         81.0      0.4      0.0          if horizon is not None:
    58       220       2632.0     12.0      0.1              return params_reshaped[:, :, :, :horizon, :]  # (B, T, R, H, V)
    59                                                   return params_reshaped  # (B, T, R, H*, V)  // H* is model level horizon

Total time: 2.50602 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/cp.py
Function: evaluate_at_points at line 109

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   109                                               @line_profiler.profile
   110                                               def evaluate_at_points(
   111                                                   self,
   112                                                   last_hidden_state: torch.Tensor,
   113                                                   points: torch.Tensor,
   114                                                   **kwargs,
   115                                               ) -> Tuple[torch.Tensor, List[torch.Tensor]]:
   116                                                   """Evaluate the distribution at the given points.
   117                                           
   118                                                   Args:
   119                                                       last_hidden_state (torch.Tensor): Hidden states of the transformer of shape (B, T, D)
   120                                                       points (torch.Tensor): Points to evaluate the distribution. Shape (B, T, H)
   121                                                       horizon (int, optional): Number of steps to consider. Defaults to model horizon.
   122                                           
   123                                                   Returns:
   124                                                       Tuple[torch.Tensor, List[torch.Tensor]]: Evaluation of the distribution at the points of Shape (B, H) and scale_tensors (empty list)
   125                                                   """
   126                                                   # Get indexed distribution
   127       110         95.0      0.9      0.0          batch_size, seq_len, _ = last_hidden_state.size()
   128       110         55.0      0.5      0.0          horizon = points.size(-1)
   129       110    2395919.0  21781.1     95.6          params = self._get_pos_params(last_hidden_state, horizon)  # (B, T, R, H, V)
   130                                                   # (B, T, R, H, V) => (B, T)
   131       110       3359.0     30.5      0.1          with profiler.record_function("select_from_cp_tensor"):
   132       220     103816.0    471.9      4.1              p_tilde = select_from_cp_tensor(
   133       220        252.0      1.1      0.0                  params.reshape(
   134       110         63.0      0.6      0.0                      batch_size * seq_len, self.rank, horizon, self.vocab_size
   135                                                           ),
   136       110        146.0      1.3      0.0                  points.reshape(batch_size * seq_len, horizon),
   137                                                       )
   138       110       2312.0     21.0      0.1              return p_tilde.reshape(batch_size, seq_len), []  # (B,T)

Total time: 2.83074 s
File: /Users/marawangamal/Documents/github/TJDNet/distributions/cp.py
Function: get_norm_consts at line 140

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   140                                               @line_profiler.profile
   141                                               def get_norm_consts(
   142                                                   self, last_hidden_state: torch.Tensor, horizon: Optional[int] = None, **kwargs
   143                                               ) -> Tuple[torch.Tensor, List[torch.Tensor]]:
   144                                                   """Get the normalization constants for the BT distributions.
   145                                           
   146                                                   Args:
   147                                                       last_hidden_state (torch.Tensor): Hidden states of the transformer of shape (B, T, D)
   148                                           
   149                                                   Returns:
   150                                                       Tuple[torch.Tensor, List[torch.Tensor]]: Norm constants and scale tensors
   151                                                   """
   152       110        134.0      1.2      0.0          batch_size, seq_len, _ = last_hidden_state.size()
   153       110        168.0      1.5      0.0          horizon = self._get_horizon(horizon)
   154                                                   # Get indexed distribution
   155       110    2391273.0  21738.8     84.5          params = self._get_pos_params(last_hidden_state, horizon)  # (B, T, R, H, V)
   156       110       3037.0     27.6      0.1          with profiler.record_function("normalize_cp_tensor"):
   157       220     432277.0   1964.9     15.3              norm_consts = sum_cp_tensor(
   158       220        265.0      1.2      0.0                  cp_params=params.reshape(
   159       110         66.0      0.6      0.0                      batch_size * seq_len, self.rank, horizon, self.vocab_size
   160                                                           ),
   161                                                       )
   162       110       2774.0     25.2      0.1              return (
   163       110        693.0      6.3      0.0                  norm_consts.reshape(batch_size, seq_len),  # (B, T)
   164       110         51.0      0.5      0.0                  [],
   165                                                       )